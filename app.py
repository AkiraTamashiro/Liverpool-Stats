# -*- coding: utf-8 -*-
"""StreamLit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eMpezgkN55OrucNYofxdJ6fvEz9dQIcj
"""

!pip install adjustText

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from adjustText import adjust_text

# Load and clean df1
df1 = pd.read_html('https://fbref.com/en/squads/822bd0ba/2023-2024/Liverpool-Stats', attrs={"id":"stats_standard_9"})[0]
df1.columns = ['_'.join(col).strip() for col in df1.columns.values]
df1.columns = [col.replace('Unnamed: 0_level_0_', '') if 'Unnamed: 0_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 1_level_0_', '') if 'Unnamed: 1_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 2_level_0_', '') if 'Unnamed: 2_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 3_level_0_', '') if 'Unnamed: 3_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 4_level_0_', '') if 'Unnamed: 4_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 5_level_0_', '') if 'Unnamed: 5_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 6_level_0_', '') if 'Unnamed: 6_level_0_' in col else col for col in df1.columns]
pos_col_index = df1.columns.get_loc('Pos')
for col in df1.columns[pos_col_index + 1:]:
    df1[col] = pd.to_numeric(df1[col], errors='coerce')
last_column_name = df1.columns[-1]
df1 = df1.drop(columns=[last_column_name])
df1['Nation'] = df1['Nation'].str[2:]
df1['Performance_npxG+A'] = df1['Performance_G+A'] - df1['Performance_PK']


# Load and clean df2
df2 = pd.read_html('https://fbref.com/en/squads/822bd0ba/2024-2025/Liverpool-Stats', attrs={"id":"stats_standard_9"})[0]
df2.columns = ['_'.join(col).strip() if col[0] else col[1].strip() for col in df2.columns.values]
df2.columns = [col.replace('Unnamed: 0_level_0_', '') if 'Unnamed: 0_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 1_level_0_', '') if 'Unnamed: 1_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 2_level_0_', '') if 'Unnamed: 2_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 3_level_0_', '') if 'Unnamed: 3_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 4_level_0_', '') if 'Unnamed: 4_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 5_level_0_', '') if 'Unnamed: 5_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 6_level_0_', '') if 'Unnamed: 6_level_0_' in col else col for col in df2.columns]
pos_col_index_df2 = df2.columns.get_loc('Pos')
for col in df2.columns[pos_col_index_df2 + 1:]:
    df2[col] = pd.to_numeric(df2[col], errors='coerce')
last_column_name_df2 = df2.columns[-1]
df2 = df2.drop(columns=[last_column_name_df2])
df2['Nation'] = df2['Nation'].str[2:]
df2['Performance_npxG+A'] = df2['Performance_G+A'] - df2['Performance_PK']

st.write("Data loaded and cleaned successfully.")

st.subheader("Playing Time Analysis (2023/24)")
playing_time_cols = ['MP','Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']
st.dataframe(df1[playing_time_cols].describe())

st.subheader("Playing Time per Player (2023/24)")
playing_time_per_player = df1[['Player','MP', 'Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']]
playing_time_per_player_cleaned = playing_time_per_player.dropna().iloc[:-2].copy()
playing_time_per_player_cleaned['Player_MP'] = playing_time_per_player_cleaned['Player'] + ' (' + playing_time_per_player_cleaned['MP'].astype(str) + ' MP)'

plt.figure(figsize=(10, 8))
ax = sns.barplot(x='Playing Time_Min', y='Player_MP', data=playing_time_per_player_cleaned.sort_values('Playing Time_Min', ascending=False))
plt.title('Playing Time Min per Player (Games Played) - 2023/24 Season')
plt.xlabel('Playing Time Min')
plt.ylabel('Player')
plt.tight_layout()

for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()


st.subheader("Playing Time Analysis (2024/25)")
playing_time_cols_df2 = ['MP','Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']
st.dataframe(df2[playing_time_cols_df2].describe())

st.subheader("Playing Time per Player (2024/25)")
playing_time_per_player_df2 = df2[['Player','MP', 'Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']]
playing_time_per_player_cleaned_df2 = playing_time_per_player_df2.dropna().iloc[:-2].copy()
playing_time_per_player_cleaned_df2['Player_MP'] = playing_time_per_player_cleaned_df2['Player'] + ' (' + playing_time_per_player_cleaned_df2['MP'].astype(str) + ' MP)'

plt.figure(figsize=(10, 8))
ax_df2_pt = sns.barplot(x='Playing Time_Min', y='Player_MP', data=playing_time_per_player_cleaned_df2.sort_values('Playing Time_Min', ascending=False))
plt.title('Playing Time Min per Player (Games Played) - 2024/25 Season')
plt.xlabel('Playing Time Min')
plt.ylabel('Player')
plt.tight_layout()

for p in ax_df2_pt.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()

st.subheader("Goals Per Minute Played (2023/24)")
df1_cleaned = df1[df1['Playing Time_Min'] > 0].copy()
df1_cleaned['Goals_Per_Minute'] = df1_cleaned['Performance_Gls'] / df1_cleaned['Playing Time_Min']
st.dataframe(df1_cleaned[['Player', 'Playing Time_Min', 'Performance_Gls', 'Goals_Per_Minute']].sort_values('Goals_Per_Minute', ascending=False))

st.subheader("Goals Per 90 Minutes Played (2023/24)")
goals_per_90 = df1[['Player', 'Per 90 Minutes_Gls']].dropna(subset=['Per 90 Minutes_Gls']).iloc[:-2].copy()
goals_per_90_cleaned_filtered = goals_per_90[goals_per_90['Per 90 Minutes_Gls'] > 0]
st.dataframe(goals_per_90_cleaned_filtered.sort_values('Per 90 Minutes_Gls', ascending=False))

st.subheader("Goals Scored vs. Expected Goals (2023/24)")
goals_comparison = df1[['Player', 'MP', 'Performance_Gls', 'Expected_xG']].dropna().iloc[:-2].copy()
goals_comparison_cleaned = goals_comparison[goals_comparison['Performance_Gls'] > 0].copy()
goals_comparison_cleaned['Player_MP'] = goals_comparison_cleaned['Player'] + ' (' + goals_comparison_cleaned['MP'].astype(str) + ' MP)'
goals_melted = goals_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_Gls', 'Expected_xG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=goals_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Goals Scored and Expected Goals (2023/24 Season) - Players with Goals')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()


st.subheader("Goals Per Minute Played (2024/25)")
df2_cleaned = df2[df2['Playing Time_Min'] > 0].copy()
df2_cleaned['Goals_Per_Minute'] = df2_cleaned['Performance_Gls'] / df2_cleaned['Playing Time_Min']
st.dataframe(df2_cleaned[['Player', 'Playing Time_Min', 'Performance_Gls', 'Goals_Per_Minute']].sort_values('Goals_Per_Minute', ascending=False))

st.subheader("Goals Per 90 Minutes Played (2024/25)")
goals_per_90_df2 = df2[['Player', 'Per 90 Minutes_Gls']].dropna(subset=['Per 90 Minutes_Gls']).iloc[:-2].copy()
goals_per_90_cleaned_filtered_df2 = goals_per_90_df2[goals_per_90_df2['Per 90 Minutes_Gls'] > 0]
st.dataframe(goals_per_90_cleaned_filtered_df2.sort_values('Per 90 Minutes_Gls', ascending=False))

st.subheader("Goals Scored vs. Expected Goals (2024/25)")
goals_comparison_df2 = df2[['Player', 'MP', 'Performance_Gls', 'Expected_xG']].dropna().iloc[:-2].copy()
goals_comparison_cleaned_df2 = goals_comparison_df2[goals_comparison_df2['Performance_Gls'] > 0].copy()
goals_comparison_cleaned_df2['Player_MP'] = goals_comparison_cleaned_df2['Player'] + ' (' + goals_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
goals_melted_df2 = goals_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_Gls', 'Expected_xG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax_df2_goals = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=goals_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Goals Scored and Expected Goals (2024/25 Season) - Players with Goals')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax_df2_goals.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()

st.subheader("Assists Per 90 Minutes Played (2023/24)")
assists_per_90 = df1[['Player', 'Per 90 Minutes_Ast']].dropna(subset=['Per 90 Minutes_Ast']).iloc[:-2].copy()
assists_per_90_cleaned_filtered = assists_per_90[assists_per_90['Per 90 Minutes_Ast'] > 0]
st.dataframe(assists_per_90_cleaned_filtered.sort_values('Per 90 Minutes_Ast', ascending=False))

st.subheader("Assists vs. Expected Assists (2023/24)")
assists_comparison = df1[['Player', 'MP', 'Performance_Ast', 'Expected_xAG']].dropna().iloc[:-2].copy()
assists_comparison_cleaned = assists_comparison[assists_comparison['Performance_Ast'] > 0].copy()
assists_comparison_cleaned['Player_MP'] = assists_comparison_cleaned['Player'] + ' (' + assists_comparison_cleaned['MP'].astype(str) + ' MP)'
assists_melted = assists_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_Ast', 'Expected_xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=assists_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Assists and Expected Assists (2023/24 Season) - Players with Assists')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()


st.subheader("Assists Per 90 Minutes Played (2024/25)")
assists_per_90_df2 = df2[['Player', 'Per 90 Minutes_Ast']].dropna(subset=['Per 90 Minutes_Ast']).iloc[:-2].copy()
assists_per_90_cleaned_filtered_df2 = assists_per_90_df2[assists_per_90_df2['Per 90 Minutes_Ast'] > 0]
st.dataframe(assists_per_90_cleaned_filtered_df2.sort_values('Per 90 Minutes_Ast', ascending=False))

st.subheader("Assists vs. Expected Assists (2024/25)")
assists_comparison_df2 = df2[['Player', 'MP', 'Performance_Ast', 'Expected_xAG']].dropna().iloc[:-2].copy()
assists_comparison_cleaned_df2 = assists_comparison_df2[assists_comparison_df2['Performance_Ast'] > 0].copy()
assists_comparison_cleaned_df2['Player_MP'] = assists_comparison_cleaned_df2['Player'] + ' (' + assists_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
assists_melted_df2 = assists_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_Ast', 'Expected_xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax_df2_assists = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=assists_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Assists and Expected Assists (2024/25 Season) - Players with Assists')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax_df2_assists.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()

st.subheader("Non-Penalty Goals + Assists vs. Expected (2023/24)")
npxg_assists_comparison = df1[['Player', 'MP', 'Performance_npxG+A', 'Expected_npxG+xAG']].dropna().iloc[:-2].copy()
npxg_assists_comparison_cleaned = npxg_assists_comparison[npxg_assists_comparison['Performance_npxG+A'] > 0].copy()
npxg_assists_comparison_cleaned['Player_MP'] = npxg_assists_comparison_cleaned['Player'] + ' (' + npxg_assists_comparison_cleaned['MP'].astype(str) + ' MP)'
npxg_assists_melted = npxg_assists_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_npxG+A', 'Expected_npxG+xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=npxg_assists_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Non-Penalty Goals + Assists and Expected Non-Penalty Goals + Expected Assists (2023/24 Season)')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()

st.subheader("Scatter Plot: Non-Penalty Goals + Assists vs. Expected (2023/24)")
plt.figure(figsize=(10, 8))
point_colors = ['darkgreen' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black' for index, row in npxg_assists_comparison_cleaned.iterrows()]
ax = sns.scatterplot(x='Expected_npxG+xAG', y='Performance_npxG+A', data=npxg_assists_comparison_cleaned, c=point_colors)
plt.title('Scatter Plot of Non-Penalty Goals + Assists vs. Expected Non-Penalty Goals + Expected Assists (2023/24 Season)')
plt.xlabel('Expected Non-Penalty Goals + Expected Assists')
plt.ylabel('Non-Penalty Goals + Assists')
max_val = max(npxg_assists_comparison_cleaned['Expected_npxG+xAG'].max(), npxg_assists_comparison_cleaned['Performance_npxG+A'].max())
plt.plot([0, max_val], [0, max_val], 'k--', lw=1)
texts = []
for i, row in npxg_assists_comparison_cleaned.iterrows():
    color = 'green' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black'
    texts.append(plt.text(row['Expected_npxG+xAG'], row['Performance_npxG+A'], row['Player'], fontsize=9, color=color))
adjust_text(texts, force_points=(0.1, 0.1), force_text=(0.1, 0.1), arrowprops=dict(arrowstyle='-', color='grey', lw=0.8))
st.pyplot(plt)
plt.close()


st.subheader("Non-Penalty Goals + Assists vs. Expected (2024/25)")
npxg_assists_comparison_df2 = df2[['Player', 'MP', 'Performance_npxG+A', 'Expected_npxG+xAG']].dropna().iloc[:-2].copy()
npxg_assists_comparison_cleaned_df2 = npxg_assists_comparison_df2[npxg_assists_comparison_df2['Performance_npxG+A'] > 0].copy()
npxg_assists_comparison_cleaned_df2['Player_MP'] = npxg_assists_comparison_cleaned_df2['Player'] + ' (' + npxg_assists_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
npxg_assists_melted_df2 = npxg_assists_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_npxG+A', 'Expected_npxG+xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax_df2_npxg = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=npxg_assists_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Non-Penalty Goals + Assists and Expected Non-Penalty Goals + Expected Assists (2024/25 Season)')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()
for p in ax_df2_npxg.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()

st.subheader("Scatter Plot: Non-Penalty Goals + Assists vs. Expected (2024/25)")
plt.figure(figsize=(10, 8))
point_colors_df2 = ['darkgreen' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black' for index, row in npxg_assists_comparison_cleaned_df2.iterrows()]
ax_df2_scatter = sns.scatterplot(x='Expected_npxG+xAG', y='Performance_npxG+A', data=npxg_assists_comparison_cleaned_df2, c=point_colors_df2)
plt.title('Scatter Plot of Non-Penalty Goals + Assists vs. Expected Non-Penalty Goals + Expected Assists (2024/25 Season)')
plt.xlabel('Expected Non-Penalty Goals + Expected Assists')
plt.ylabel('Non-Penalty Goals + Assists')
max_val_df2 = max(npxg_assists_comparison_cleaned_df2['Expected_npxG+xAG'].max(), npxg_assists_comparison_cleaned_df2['Performance_npxG+A'].max())
plt.plot([0, max_val_df2], [0, max_val_df2], 'k--', lw=1)
texts_df2 = []
for i, row in npxg_assists_comparison_cleaned_df2.iterrows():
    color = 'green' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black'
    texts_df2.append(plt.text(row['Expected_npxG+xAG'], row['Performance_npxG+A'], row['Player'], fontsize=9, color=color))
adjust_text(texts_df2, force_points=(0.1, 0.1), force_text=(0.1, 0.1), arrowprops=dict(arrowstyle='-', color='grey', lw=0.8))
st.pyplot(plt)
plt.close()

st.subheader("Comparison of Goals Scored (2023/24 vs 2024/25)")
goals_2023_24 = df1[['Player', 'Performance_Gls']].copy()
goals_2023_24.rename(columns={'Performance_Gls': 'Goals_2023_24'}, inplace=True)
goals_2024_25 = df2[['Player', 'Performance_Gls']].copy()
goals_2024_25.rename(columns={'Performance_Gls': 'Goals_2024_25'}, inplace=True)
goals_comparison = pd.merge(goals_2023_24, goals_2024_25, on='Player', how='inner')
goals_comparison_cleaned = goals_comparison.dropna().iloc[:-2].copy()
goals_comparison_cleaned = goals_comparison_cleaned[(goals_comparison_cleaned['Goals_2023_24'] > 0) | (goals_comparison_cleaned['Goals_2024_25'] > 0)].copy() # Keep players with goals in either season
goals_comparison_melted = goals_comparison_cleaned.melt('Player', var_name='Season', value_name='Goals')

plt.figure(figsize=(12, 8))
ax_goals_comparison = sns.barplot(x='Goals', y='Player', hue='Season', data=goals_comparison_melted.sort_values('Goals', ascending=False))
plt.title('Comparison of Goals Scored Per Player (2023/24 vs 2024/25) - Players with Goals in Either Season')
plt.xlabel('Goals Scored')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()
for p in ax_goals_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()


st.subheader("Comparison of Assists (2023/24 vs 2024/25)")
assists_2023_24 = df1[['Player', 'Performance_Ast']].copy()
assists_2023_24.rename(columns={'Performance_Ast': 'Assists_2023_24'}, inplace=True)
assists_2024_25 = df2[['Player', 'Performance_Ast']].copy()
assists_2024_25.rename(columns={'Performance_Ast': 'Assists_2024_25'}, inplace=True)
assists_comparison = pd.merge(assists_2023_24, assists_2024_25, on='Player', how='inner')
assists_comparison_cleaned = assists_comparison.dropna().iloc[:-2].copy()
assists_comparison_cleaned = assists_comparison_cleaned[(assists_comparison_cleaned['Assists_2023_24'] > 0) | (assists_comparison_cleaned['Assists_2024_25'] > 0)].copy() # Keep players with assists in either season
assists_comparison_melted = assists_comparison_cleaned.melt('Player', var_name='Season', value_name='Assists')

plt.figure(figsize=(12, 8))
ax_assists_comparison = sns.barplot(x='Assists', y='Player', hue='Season', data=assists_comparison_melted.sort_values('Assists', ascending=False))
plt.title('Comparison of Assists Per Player (2023/24 vs 2024/25) - Players with Assists in Either Season')
plt.xlabel('Assists')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()
for p in ax_assists_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()


st.subheader("Comparison of Goals + Assists (2023/24 vs 2024/25)")
df1['G+A'] = df1['Performance_Gls'] + df1['Performance_Ast']
df2['G+A'] = df2['Performance_Gls'] + df2['Performance_Ast']
ga_2023_24 = df1[['Player', 'G+A']].copy()
ga_2023_24.rename(columns={'G+A': 'G+A_2023_24'}, inplace=True)
ga_2024_25 = df2[['Player', 'G+A']].copy()
ga_2024_25.rename(columns={'G+A': 'G+A_2024_25'}, inplace=True)
ga_comparison = pd.merge(ga_2023_24, ga_2024_25, on='Player', how='inner')
ga_comparison_cleaned = ga_comparison.dropna().iloc[:-2].copy()
ga_comparison_cleaned = ga_comparison_cleaned[(ga_comparison_cleaned['G+A_2023_24'] > 0) | (ga_comparison_cleaned['G+A_2024_25'] > 0)].copy() # Keep players with G+A in either season
ga_comparison_melted = ga_comparison_cleaned.melt('Player', var_name='Season', value_name='G+A')

plt.figure(figsize=(12, 8))
ax_ga_comparison = sns.barplot(x='G+A', y='Player', hue='Season', data=ga_comparison_melted.sort_values('G+A', ascending=False))
plt.title('Comparison of Goals + Assists Per Player (2023/24 vs 2024/25) - Players with G+A in Either Season')
plt.xlabel('Goals + Assists')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()
for p in ax_ga_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')
st.pyplot(plt)
plt.close()