# -*- coding: utf-8 -*-
"""Liverpool Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fAxJjXE3RTuF-Z26MH_aMxc1_6sjcTRJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#df1 = Premier League Liverpool Stats 2023/24
#df2 = Premier League Liverpool Stats 2024/25

"""## **Liverpool Stats from Premier League 2023/24**"""

df1=pd.read_html('https://fbref.com/en/squads/822bd0ba/2023-2024/Liverpool-Stats', attrs={"id":"stats_standard_9"})[0]

df1.head()

#Clean first row
df1.columns = ['_'.join(col).strip() for col in df1.columns.values]

#Clean Column's Name
df1.columns = [col.replace('Unnamed: 0_level_0_', '') if 'Unnamed: 0_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 1_level_0_', '') if 'Unnamed: 1_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 2_level_0_', '') if 'Unnamed: 2_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 3_level_0_', '') if 'Unnamed: 3_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 4_level_0_', '') if 'Unnamed: 4_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 5_level_0_', '') if 'Unnamed: 5_level_0_' in col else col for col in df1.columns]
df1.columns = [col.replace('Unnamed: 6_level_0_', '') if 'Unnamed: 6_level_0_' in col else col for col in df1.columns]
df1.head()

# after column Pos, make all as numbers

# Find the index of the 'Pos' column
pos_col_index = df1.columns.get_loc('Pos')

# Iterate through columns after 'Pos' and convert to numeric, coercing errors
for col in df1.columns[pos_col_index + 1:]:
    df1[col] = pd.to_numeric(df1[col], errors='coerce')

df1.head()

# Identify the name of the last column
last_column_name = df1.columns[-1]

# Drop the last column
df1 = df1.drop(columns=[last_column_name])

df1.head()

# Remove Letters on Nation column
df1['Nation'] = df1['Nation'].str[2:]
df1.head()

print(df1.columns.tolist())

# Analyze Playing Time columns
playing_time_cols = ['MP','Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']
display(df1[playing_time_cols].describe())

# Display playing time per player
playing_time_per_player = df1[['Player','MP', 'Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']]
display(playing_time_per_player)

playing_time_per_player_cleaned = playing_time_per_player.dropna()
display(playing_time_per_player_cleaned)

playing_time_per_player_cleaned = playing_time_per_player_cleaned[:-2]
display(playing_time_per_player_cleaned)

# Create a new column combining Player name and MP
playing_time_per_player_cleaned['Player_MP'] = playing_time_per_player_cleaned['Player'] + ' (' + playing_time_per_player_cleaned['MP'].astype(str) + ' MP)'

plt.figure(figsize=(10, 8))
ax = sns.barplot(x='Playing Time_Min', y='Player_MP', data=playing_time_per_player_cleaned.sort_values('Playing Time_Min', ascending=False))
plt.title('Playing Time Min per Player (Games Played)')
plt.xlabel('Playing Time Min')
plt.ylabel('Player')
plt.tight_layout()

# Add the value of Playing Time_90s at the end of each bar
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

# Calculate goals per minute played
# Avoid division by zero by adding a small value or filtering out players with 0 minutes
df1_cleaned = df1[df1['Playing Time_Min'] > 0].copy()
df1_cleaned['Goals_Per_Minute'] = df1_cleaned['Performance_Gls'] / df1_cleaned['Playing Time_Min']

# Display the relevant columns
display(df1_cleaned[['Player', 'Playing Time_Min', 'Performance_Gls', 'Goals_Per_Minute']].sort_values('Goals_Per_Minute', ascending=False))

# Display goals per 90 minutes played per player
goals_per_90 = df1[['Player', 'Per 90 Minutes_Gls']]

# Remove rows with NaN values in the 'Per 90 Minutes_Gls' column and the last two rows
goals_per_90_cleaned = goals_per_90.dropna(subset=['Per 90 Minutes_Gls'])
goals_per_90_cleaned = goals_per_90_cleaned[:-2]

# Remove players with 0.00 goals per 90 minutes
goals_per_90_cleaned_filtered = goals_per_90_cleaned[goals_per_90_cleaned['Per 90 Minutes_Gls'] > 0]

display(goals_per_90_cleaned_filtered.sort_values('Per 90 Minutes_Gls', ascending=False))

# Display assists per 90 minutes played per player
assists_per_90 = df1[['Player', 'Per 90 Minutes_Ast']]

# Remove rows with NaN values in the 'Per 90 Minutes_Ast' column and the last two rows
assists_per_90_cleaned = assists_per_90.dropna(subset=['Per 90 Minutes_Ast'])
assists_per_90_cleaned = assists_per_90_cleaned[:-2]

# Remove players with 0.00 assists per 90 minutes
assists_per_90_cleaned_filtered = assists_per_90_cleaned[assists_per_90_cleaned['Per 90 Minutes_Ast'] > 0]

display(assists_per_90_cleaned_filtered.sort_values('Per 90 Minutes_Ast', ascending=False))

# Display goals + assists per 90 minutes played per player
goals_assists_per_90 = df1[['Player', 'Per 90 Minutes_G+A']]

# Remove rows with NaN values in the 'Per 90 Minutes_G+A' column and the last two rows
goals_assists_per_90_cleaned = goals_assists_per_90.dropna(subset=['Per 90 Minutes_G+A'])
goals_assists_per_90_cleaned = goals_assists_per_90_cleaned[:-2]

# Remove players with 0.00 goals + assists per 90 minutes
goals_assists_per_90_cleaned_filtered = goals_assists_per_90_cleaned[goals_assists_per_90_cleaned['Per 90 Minutes_G+A'] > 0]

display(goals_assists_per_90_cleaned_filtered.sort_values('Per 90 Minutes_G+A', ascending=False))

# Select relevant columns for comparison
goals_comparison = df1[['Player', 'MP', 'Performance_Gls', 'Expected_xG']]

# Remove rows with NaN values in these columns
goals_comparison_cleaned = goals_comparison.dropna()

# Remove the last two rows (Squad Total and Opponent Total)
goals_comparison_cleaned = goals_comparison_cleaned[:-2]

# Filter for players with at least one goal
goals_comparison_cleaned = goals_comparison_cleaned[goals_comparison_cleaned['Performance_Gls'] > 0]

# Create a new column combining Player name and MP
goals_comparison_cleaned['Player_MP'] = goals_comparison_cleaned['Player'] + ' (' + goals_comparison_cleaned['MP'].astype(str) + ' MP)'

# Melt the DataFrame for easier plotting, only including the numeric goal columns
goals_melted = goals_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_Gls', 'Expected_xG'], var_name='Metric', value_name='Value')


plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=goals_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Goals Scored and Expected Goals (2023/24 Season) - Players with Goals')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

print(df1.columns.tolist())

# Select relevant columns for comparison
assists_comparison = df1[['Player', 'MP', 'Performance_Ast', 'Expected_xAG']]

# Remove rows with NaN values in these columns
assists_comparison_cleaned = assists_comparison.dropna()

# Remove the last two rows (Squad Total and Opponent Total)
assists_comparison_cleaned = assists_comparison_cleaned[:-2]

# Filter for players with at least one assist
assists_comparison_cleaned = assists_comparison_cleaned[assists_comparison_cleaned['Performance_Ast'] > 0]

# Create a new column combining Player name and MP
assists_comparison_cleaned['Player_MP'] = assists_comparison_cleaned['Player'] + ' (' + assists_comparison_cleaned['MP'].astype(str) + ' MP)'

# Melt the DataFrame for easier plotting, only including the numeric assist columns
assists_melted = assists_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_Ast', 'Expected_xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=assists_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Assists and Expected Assists (2023/24 Season) - Players with Assists')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

# Calculate non-penalty goals plus assists
df1['Performance_npxG+A'] = df1['Performance_G+A'] - df1['Performance_PK']

# Select relevant columns for comparison
npxg_assists_comparison = df1[['Player', 'MP', 'Performance_npxG+A', 'Expected_npxG+xAG']]

# Remove rows with NaN values in these columns
npxg_assists_comparison_cleaned = npxg_assists_comparison.dropna()

# Remove the last two rows (Squad Total and Opponent Total)
npxg_assists_comparison_cleaned = npxg_assists_comparison_cleaned[:-2]

# Filter for players with at least one non-penalty goal contribution
npxg_assists_comparison_cleaned = npxg_assists_comparison_cleaned[npxg_assists_comparison_cleaned['Performance_npxG+A'] > 0]

# Create a new column combining Player name and MP
npxg_assists_comparison_cleaned['Player_MP'] = npxg_assists_comparison_cleaned['Player'] + ' (' + npxg_assists_comparison_cleaned['MP'].astype(str) + ' MP)'

# Melt the DataFrame for easier plotting, only including the numeric columns
npxg_assists_melted = npxg_assists_comparison_cleaned.melt(id_vars=['Player_MP'], value_vars=['Performance_npxG+A', 'Expected_npxG+xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=npxg_assists_melted.sort_values('Value', ascending=False))
plt.title('Comparison of Non-Penalty Goals + Assists and Expected Non-Penalty Goals + Expected Assists (2023/24 Season)')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

from adjustText import adjust_text

plt.figure(figsize=(10, 8))

# Create a list of colors for the scatter plot points
point_colors = ['darkgreen' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black' for index, row in npxg_assists_comparison_cleaned.iterrows()]

ax = sns.scatterplot(x='Expected_npxG+xAG', y='Performance_npxG+A', data=npxg_assists_comparison_cleaned, c=point_colors)
plt.title('Scatter Plot of Non-Penalty Goals + Assists vs. Expected Non-Penalty Goals + Expected Assists (2023/24 Season)')
plt.xlabel('Expected Non-Penalty Goals + Expected Assists')
plt.ylabel('Non-Penalty Goals + Assists')

# Add a line for expected = actual
max_val = max(npxg_assists_comparison_cleaned['Expected_npxG+xAG'].max(), npxg_assists_comparison_cleaned['Performance_npxG+A'].max())
plt.plot([0, max_val], [0, max_val], 'k--', lw=1)


texts = []
for i, row in npxg_assists_comparison_cleaned.iterrows():
    # Keep text color as black or green based on previous logic
    color = 'green' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black'
    texts.append(plt.text(row['Expected_npxG+xAG'], row['Performance_npxG+A'], row['Player'], fontsize=9, color=color))

# Adjust text to avoid overlapping, trying to keep them closer
adjust_text(texts, force_points=(0.5, 0.5), force_text=(0.5, 0.5), arrowprops=dict(arrowstyle='-', color='grey', lw=0.5))


plt.tight_layout()
plt.show()

"""# **Liverpool Stats from Premier League 2024/25**"""

df2=pd.read_html('https://fbref.com/en/squads/822bd0ba/2024-2025/Liverpool-Stats', attrs={"id":"stats_standard_9"})[0]

df2.head()

!pip install adjustText

"""## Cleaning and Analyzing Liverpool Stats from Premier League 2024/25

### Data Cleaning
"""

# Clean first row of df2 - Modified to handle multi-level columns
df2.columns = ['_'.join(col).strip() if col[0] else col[1].strip() for col in df2.columns.values]
display(df2.head())

# Clean Column's Name of df2 - This step might be redundant or need adjustment after the previous fix
# I will keep it for now but monitor if issues persist
df2.columns = [col.replace('Unnamed: 0_level_0_', '') if 'Unnamed: 0_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 1_level_0_', '') if 'Unnamed: 1_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 2_level_0_', '') if 'Unnamed: 2_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 3_level_0_', '') if 'Unnamed: 3_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 4_level_0_', '') if 'Unnamed: 4_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 5_level_0_', '') if 'Unnamed: 5_level_0_' in col else col for col in df2.columns]
df2.columns = [col.replace('Unnamed: 6_level_0_', '') if 'Unnamed: 6_level_0_' in col else col for col in df2.columns]
display(df2.head())

# after column Pos, make all as numbers in df2
# Find the index of the 'Pos' column
pos_col_index_df2 = df2.columns.get_loc('Pos')

# Iterate through columns after 'Pos' and convert to numeric, coercing errors
for col in df2.columns[pos_col_index_df2 + 1:]:
    df2[col] = pd.to_numeric(df2[col], errors='coerce')

display(df2.head())

# Identify the name of the last column in df2
last_column_name_df2 = df2.columns[-1]

# Drop the last column from df2
df2 = df2.drop(columns=[last_column_name_df2])

display(df2.head())

# Remove Letters on Nation column in df2
df2['Nation'] = df2['Nation'].str[2:]
display(df2.head())

"""### Playing Time Analysis (2024/25)"""

# Analyze Playing Time columns for df2
playing_time_cols_df2 = ['MP','Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']
display(df2[playing_time_cols_df2].describe())

# Display playing time per player for df2
playing_time_per_player_df2 = df2[['Player','MP', 'Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s']]
display(playing_time_per_player_df2)

# Remove rows with NaN values and the last two rows from playing_time_per_player_df2
playing_time_per_player_cleaned_df2 = playing_time_per_player_df2.dropna().iloc[:-2].copy()
display(playing_time_per_player_cleaned_df2)

# Create a new column combining Player name and MP for plotting df2
playing_time_per_player_cleaned_df2['Player_MP'] = playing_time_per_player_cleaned_df2['Player'] + ' (' + playing_time_per_player_cleaned_df2['MP'].astype(str) + ' MP)'

plt.figure(figsize=(10, 8))
ax_df2_pt = sns.barplot(x='Playing Time_Min', y='Player_MP', data=playing_time_per_player_cleaned_df2.sort_values('Playing Time_Min', ascending=False))
plt.title('Playing Time Min per Player (Games Played) - 2024/25 Season')
plt.xlabel('Playing Time Min')
plt.ylabel('Player')
plt.tight_layout()

# Add the value of Playing Time_90s at the end of each bar
for p in ax_df2_pt.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

"""### Goals Analysis (2024/25)"""

# Calculate goals per minute played for df2
df2_cleaned = df2[df2['Playing Time_Min'] > 0].copy()
df2_cleaned['Goals_Per_Minute'] = df2_cleaned['Performance_Gls'] / df2_cleaned['Playing Time_Min']

# Display the relevant columns
display(df2_cleaned[['Player', 'Playing Time_Min', 'Performance_Gls', 'Goals_Per_Minute']].sort_values('Goals_Per_Minute', ascending=False))

# Display goals per 90 minutes played per player for df2
goals_per_90_df2 = df2[['Player', 'Per 90 Minutes_Gls']].dropna(subset=['Per 90 Minutes_Gls']).iloc[:-2].copy()

# Remove players with 0.00 goals per 90 minutes
goals_per_90_cleaned_filtered_df2 = goals_per_90_df2[goals_per_90_df2['Per 90 Minutes_Gls'] > 0]

display(goals_per_90_cleaned_filtered_df2.sort_values('Per 90 Minutes_Gls', ascending=False))

# Compare goals scored and expected goals for df2
goals_comparison_df2 = df2[['Player', 'MP', 'Performance_Gls', 'Expected_xG']].dropna().iloc[:-2].copy()
goals_comparison_cleaned_df2 = goals_comparison_df2[goals_comparison_df2['Performance_Gls'] > 0].copy()
goals_comparison_cleaned_df2['Player_MP'] = goals_comparison_cleaned_df2['Player'] + ' (' + goals_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
goals_melted_df2 = goals_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_Gls', 'Expected_xG'], var_name='Metric', value_name='Value')


plt.figure(figsize=(12, 8))
ax_df2_goals = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=goals_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Goals Scored and Expected Goals (2024/25 Season) - Players with Goals')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_df2_goals.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

"""### Assists Analysis (2024/25)"""

# Display assists per 90 minutes played per player for df2
assists_per_90_df2 = df2[['Player', 'Per 90 Minutes_Ast']].dropna(subset=['Per 90 Minutes_Ast']).iloc[:-2].copy()
assists_per_90_cleaned_filtered_df2 = assists_per_90_df2[assists_per_90_df2['Per 90 Minutes_Ast'] > 0]
display(assists_per_90_cleaned_filtered_df2.sort_values('Per 90 Minutes_Ast', ascending=False))

# Compare assists and expected assists for df2
assists_comparison_df2 = df2[['Player', 'MP', 'Performance_Ast', 'Expected_xAG']].dropna().iloc[:-2].copy()
assists_comparison_cleaned_df2 = assists_comparison_df2[assists_comparison_df2['Performance_Ast'] > 0].copy()
assists_comparison_cleaned_df2['Player_MP'] = assists_comparison_cleaned_df2['Player'] + ' (' + assists_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
assists_melted_df2 = assists_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_Ast', 'Expected_xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax_df2_assists = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=assists_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Assists and Expected Assists (2024/25 Season) - Players with Assists')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_df2_assists.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

"""### Non-Penalty Goals + Assists Analysis (2024/25)"""

# Calculate non-penalty goals plus assists for df2
df2['Performance_npxG+A'] = df2['Performance_G+A'] - df2['Performance_PK']

# Compare non-penalty goals + assists and expected non-penalty goals + expected assists for df2
npxg_assists_comparison_df2 = df2[['Player', 'MP', 'Performance_npxG+A', 'Expected_npxG+xAG']].dropna().iloc[:-2].copy()
npxg_assists_comparison_cleaned_df2 = npxg_assists_comparison_df2[npxg_assists_comparison_df2['Performance_npxG+A'] > 0].copy()
npxg_assists_comparison_cleaned_df2['Player_MP'] = npxg_assists_comparison_cleaned_df2['Player'] + ' (' + npxg_assists_comparison_cleaned_df2['MP'].astype(str) + ' MP)'
npxg_assists_melted_df2 = npxg_assists_comparison_cleaned_df2.melt(id_vars=['Player_MP'], value_vars=['Performance_npxG+A', 'Expected_npxG+xAG'], var_name='Metric', value_name='Value')

plt.figure(figsize=(12, 8))
ax_df2_npxg = sns.barplot(x='Value', y='Player_MP', hue='Metric', data=npxg_assists_melted_df2.sort_values('Value', ascending=False))
plt.title('Comparison of Non-Penalty Goals + Assists and Expected Non-Penalty Goals + Expected Assists (2024/25 Season)')
plt.xlabel('Count')
plt.ylabel('Player')
plt.legend(title='Metric')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_df2_npxg.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.1f}'.format(width),
             ha='left', va='center')

plt.show()

from adjustText import adjust_text

plt.figure(figsize=(10, 8))

# Create a list of colors for the scatter plot points
point_colors_df2 = ['darkgreen' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black' for index, row in npxg_assists_comparison_cleaned_df2.iterrows()]

ax_df2_scatter = sns.scatterplot(x='Expected_npxG+xAG', y='Performance_npxG+A', data=npxg_assists_comparison_cleaned_df2, c=point_colors_df2)
plt.title('Scatter Plot of Non-Penalty Goals + Assists vs. Expected Non-Penalty Goals + Expected Assists (2024/25 Season)')
plt.xlabel('Expected Non-Penalty Goals + Expected Assists')
plt.ylabel('Non-Penalty Goals + Assists')

# Add a line for expected = actual
max_val_df2 = max(npxg_assists_comparison_cleaned_df2['Expected_npxG+xAG'].max(), npxg_assists_comparison_cleaned_df2['Performance_npxG+A'].max())
plt.plot([0, max_val_df2], [0, max_val_df2], 'k--', lw=1)


texts_df2 = []
for i, row in npxg_assists_comparison_cleaned_df2.iterrows():
    # Keep text color as black or green based on previous logic
    color = 'green' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black'
    texts_df2.append(plt.text(row['Expected_npxG+xAG'], row['Performance_npxG+A'], row['Player'], fontsize=9, color=color))

plt.tight_layout()
plt.show()

from adjustText import adjust_text

plt.figure(figsize=(10, 8))

# Create a list of colors for the scatter plot points
point_colors_df2 = ['darkgreen' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black' for index, row in npxg_assists_comparison_cleaned_df2.iterrows()]

ax_df2_scatter = sns.scatterplot(x='Expected_npxG+xAG', y='Performance_npxG+A', data=npxg_assists_comparison_cleaned_df2, c=point_colors_df2)
plt.title('Scatter Plot of Non-Penalty Goals + Assists vs. Expected Non-Penalty Goals + Expected Assists (2024/25 Season)')
plt.xlabel('Expected Non-Penalty Goals + Expected Assists')
plt.ylabel('Non-Penalty Goals + Assists')

# Add a line for expected = actual
max_val_df2 = max(npxg_assists_comparison_cleaned_df2['Expected_npxG+xAG'].max(), npxg_assists_comparison_cleaned_df2['Performance_npxG+A'].max())
plt.plot([0, max_val_df2], [0, max_val_df2], 'k--', lw=1)


texts_df2 = []
for i, row in npxg_assists_comparison_cleaned_df2.iterrows():
    # Keep text color as black or green based on previous logic
    color = 'green' if row['Performance_npxG+A'] > row['Expected_npxG+xAG'] else 'black'
    texts_df2.append(plt.text(row['Expected_npxG+xAG'], row['Performance_npxG+A'], row['Player'], fontsize=9, color=color))

# Adjust text to avoid overlapping, trying to keep them closer
adjust_text(texts_df2, force_points=(0.1, 0.1), force_text=(0.1, 0.1), arrowprops=dict(arrowstyle='-', color='grey', lw=0.8))

plt.tight_layout()
plt.show()



"""## Comparison of Goals, Assists, and Goals + Assists Between 2023/24 and 2024/25 Seasons"""

# Select relevant columns for comparison across seasons
goals_2023_24 = df1[['Player', 'Performance_Gls']].copy()
goals_2023_24.rename(columns={'Performance_Gls': 'Goals_2023_24'}, inplace=True)

goals_2024_25 = df2[['Player', 'Performance_Gls']].copy()
goals_2024_25.rename(columns={'Performance_Gls': 'Goals_2024_25'}, inplace=True)

# Merge the dataframes on Player name
goals_comparison = pd.merge(goals_2023_24, goals_2024_25, on='Player', how='inner')

# Remove rows with NaN values in either season's goals and remove the last two rows (Squad Total and Opponent Total)
goals_comparison_cleaned = goals_comparison.dropna().iloc[:-2].copy()

display(goals_comparison_cleaned)

# Visualize the goals comparison using a bar chart
goals_comparison_melted = goals_comparison_cleaned.melt('Player', var_name='Season', value_name='Goals')

plt.figure(figsize=(12, 8))
ax_goals_comparison = sns.barplot(x='Goals', y='Player', hue='Season', data=goals_comparison_melted.sort_values('Goals', ascending=False))
plt.title('Comparison of Goals Scored Per Player (2023/24 vs 2024/25)')
plt.xlabel('Goals Scored')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_goals_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')

plt.show()

# Select relevant columns for comparison across seasons
assists_2023_24 = df1[['Player', 'Performance_Ast']].copy()
assists_2023_24.rename(columns={'Performance_Ast': 'Assists_2023_24'}, inplace=True)

assists_2024_25 = df2[['Player', 'Performance_Ast']].copy()
assists_2024_25.rename(columns={'Performance_Ast': 'Assists_2024_25'}, inplace=True)

# Merge the dataframes on Player name
assists_comparison = pd.merge(assists_2023_24, assists_2024_25, on='Player', how='inner')

# Remove rows with NaN values in either season's assists and remove the last two rows (Squad Total and Opponent Total)
assists_comparison_cleaned = assists_comparison.dropna().iloc[:-2].copy()

display(assists_comparison_cleaned)

# Visualize the assists comparison using a bar chart
assists_comparison_melted = assists_comparison_cleaned.melt('Player', var_name='Season', value_name='Assists')

plt.figure(figsize=(12, 8))
ax_assists_comparison = sns.barplot(x='Assists', y='Player', hue='Season', data=assists_comparison_melted.sort_values('Assists', ascending=False))
plt.title('Comparison of Assists Per Player (2023/24 vs 2024/25)')
plt.xlabel('Assists')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_assists_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')

plt.show()

# Calculate goals + assists for each season
df1['G+A'] = df1['Performance_Gls'] + df1['Performance_Ast']
df2['G+A'] = df2['Performance_Gls'] + df2['Performance_Ast']

# Select relevant columns for comparison across seasons
ga_2023_24 = df1[['Player', 'G+A']].copy()
ga_2023_24.rename(columns={'G+A': 'G+A_2023_24'}, inplace=True)

ga_2024_25 = df2[['Player', 'G+A']].copy()
ga_2024_25.rename(columns={'G+A': 'G+A_2024_25'}, inplace=True)

# Merge the dataframes on Player name
ga_comparison = pd.merge(ga_2023_24, ga_2024_25, on='Player', how='inner')

# Remove rows with NaN values in either season's G+A and remove the last two rows (Squad Total and Opponent Total)
ga_comparison_cleaned = ga_comparison.dropna().iloc[:-2].copy()

display(ga_comparison_cleaned)

# Visualize the goals + assists comparison using a bar chart
ga_comparison_melted = ga_comparison_cleaned.melt('Player', var_name='Season', value_name='G+A')

plt.figure(figsize=(12, 8))
ax_ga_comparison = sns.barplot(x='G+A', y='Player', hue='Season', data=ga_comparison_melted.sort_values('G+A', ascending=False))
plt.title('Comparison of Goals + Assists Per Player (2023/24 vs 2024/25)')
plt.xlabel('Goals + Assists')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_ga_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')

plt.show()

# Select relevant columns for comparison across seasons
goals_2023_24 = df1[['Player', 'Performance_Gls']].copy()
goals_2023_24.rename(columns={'Performance_Gls': 'Goals_2023_24'}, inplace=True)

goals_2024_25 = df2[['Player', 'Performance_Gls']].copy()
goals_2024_25.rename(columns={'Performance_Gls': 'Goals_2024_25'}, inplace=True)

# Merge the dataframes on Player name
goals_comparison = pd.merge(goals_2023_24, goals_2024_25, on='Player', how='inner')

# Remove rows with NaN values in either season's goals and remove the last two rows (Squad Total and Opponent Total)
goals_comparison_cleaned = goals_comparison.dropna().iloc[:-2].copy()

# Filter to remove players with 0 goals in *either* season
goals_comparison_cleaned = goals_comparison_cleaned[(goals_comparison_cleaned['Goals_2023_24'] > 0) & (goals_comparison_cleaned['Goals_2024_25'] > 0)].copy()


display(goals_comparison_cleaned)

# Visualize the goals comparison using a bar chart
goals_comparison_melted = goals_comparison_cleaned.melt('Player', var_name='Season', value_name='Goals')

plt.figure(figsize=(12, 8))
ax_goals_comparison = sns.barplot(x='Goals', y='Player', hue='Season', data=goals_comparison_melted.sort_values('Goals', ascending=False))
plt.title('Comparison of Goals Scored Per Player (2023/24 vs 2024/25) - Players with Goals in Both Seasons')
plt.xlabel('Goals Scored')
plt.ylabel('Player')
plt.legend(title='Season')
plt.tight_layout()

# Add the value at the end of each bar
for p in ax_goals_comparison.patches:
    width = p.get_width()
    plt.text(width, p.get_y() + p.get_height()/2.,
             '{:1.0f}'.format(width),
             ha='left', va='center')

plt.show()